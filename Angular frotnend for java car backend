// Angular service to interact with the Java backend
// Ensure the backend exposes appropriate REST APIs for database operations

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class CarService {
  private apiUrl = 'http://localhost:8080/api/cars'; // Update with the actual backend URL

  constructor(private http: HttpClient) {}

  addCar(car: { make: string; model: string; year: number }): Observable<any> {
    return this.http.post(`${this.apiUrl}/add`, car);
  }

  getAllCars(): Observable<any[]> {
    return this.http.get<any[]>(`${this.apiUrl}`);
  }

  searchCarByMake(make: string): Observable<any[]> {
    return this.http.get<any[]>(`${this.apiUrl}/search?make=${make}`);
  }

  deleteCarById(id: number): Observable<any> {
    return this.http.delete(`${this.apiUrl}/${id}`);
  }
}

// Angular component for user interaction
import { Component, OnInit } from '@angular/core';
import { CarService } from './car.service';

@Component({
  selector: 'app-car-database',
  template: `
    <div>
      <h1>Car Database</h1>

      <h2>Add Car</h2>
      <form (ngSubmit)="addCar()">
        <input [(ngModel)]="newCar.make" name="make" placeholder="Make" required />
        <input [(ngModel)]="newCar.model" name="model" placeholder="Model" required />
        <input [(ngModel)]="newCar.year" name="year" type="number" placeholder="Year" required />
        <button type="submit">Add Car</button>
      </form>

      <h2>All Cars</h2>
      <button (click)="loadCars()">Load Cars</button>
      <ul>
        <li *ngFor="let car of cars">
          {{ car.id }}: {{ car.make }} {{ car.model }} ({{ car.year }})
          <button (click)="deleteCar(car.id)">Delete</button>
        </li>
      </ul>

      <h2>Search Cars</h2>
      <input [(ngModel)]="searchMake" placeholder="Search by make" />
      <button (click)="searchCars()">Search</button>
      <ul>
        <li *ngFor="let car of searchResults">
          {{ car.id }}: {{ car.make }} {{ car.model }} ({{ car.year }})
        </li>
      </ul>
    </div>
  `,
  styles: [
    'input { margin: 5px; }',
    'button { margin: 5px; }'
  ]
})
export class CarDatabaseComponent implements OnInit {
  newCar = { make: '', model: '', year: null };
  cars: any[] = [];
  searchMake = '';
  searchResults: any[] = [];

  constructor(private carService: CarService) {}

  ngOnInit(): void {
    this.loadCars();
  }

  addCar(): void {
    this.carService.addCar(this.newCar).subscribe(() => {
      alert('Car added successfully');
      this.newCar = { make: '', model: '', year: null };
      this.loadCars();
    });
  }

  loadCars(): void {
    this.carService.getAllCars().subscribe((data) => {
      this.cars = data;
    });
  }

  searchCars(): void {
    this.carService.searchCarByMake(this.searchMake).subscribe((data) => {
      this.searchResults = data;
    });
  }

  deleteCar(id: number): void {
    this.carService.deleteCarById(id).subscribe(() => {
      alert('Car deleted successfully');
      this.loadCars();
    });
  }
}
