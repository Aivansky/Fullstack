import java.util.*;

public class DijkstraAlgorithm {

    static class Graph {
        private int vertices;
        private List<List<Node>> adjList;

        static class Node implements Comparable<Node> {
            int vertex;
            int weight;

            Node(int vertex, int weight) {
                this.vertex = vertex;
                this.weight = weight;
            }

            @Override
            public int compareTo(Node other) {
                return Integer.compare(this.weight, other.weight);
            }
        }

        Graph(int vertices) {
            this.vertices = vertices;
            adjList = new ArrayList<>();

            for (int i = 0; i < vertices; i++) {
                adjList.add(new ArrayList<>());
            }
        }

        void addEdge(int source, int destination, int weight) {
            adjList.get(source).add(new Node(destination, weight));
            adjList.get(destination).add(new Node(source, weight)); // For undirected graph
        }

        void dijkstra(int start) {
            PriorityQueue<Node> pq = new PriorityQueue<>();
            int[] distances = new int[vertices];
            Arrays.fill(distances, Integer.MAX_VALUE);

            pq.add(new Node(start, 0));
            distances[start] = 0;

            while (!pq.isEmpty()) {
                Node current = pq.poll();

                for (Node neighbor : adjList.get(current.vertex)) {
                    int newDist = distances[current.vertex] + neighbor.weight;

                    if (newDist < distances[neighbor.vertex]) {
                        distances[neighbor.vertex] = newDist;
                        pq.add(new Node(neighbor.vertex, newDist));
                    }
                }
            }

            System.out.println("Vertex\tDistance from Source");
            for (int i = 0; i < vertices; i++) {
                System.out.println(i + "\t" + distances[i]);
            }
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter the number of vertices:");
        int vertices = scanner.nextInt();

        Graph graph = new Graph(vertices);

        System.out.println("Enter the number of edges:");
        int edges = scanner.nextInt();

        System.out.println("Enter the edges in the format: source destination weight");
        for (int i = 0; i < edges; i++) {
            int source = scanner.nextInt();
            int destination = scanner.nextInt();
            int weight = scanner.nextInt();
            graph.addEdge(source, destination, weight);
        }

        System.out.println("Enter the starting vertex:");
        int startVertex = scanner.nextInt();

        graph.dijkstra(startVertex);

        scanner.close();
    }
}
